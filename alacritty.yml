---
env:
  TERM: xterm-256color

window:
  dimensions:
    columns: 140
    lines: 35
  padding:
    x: 5
    y: 5
  decorations: buttonless

draw_bold_text_with_bright_colors: true
font:
  normal:
    #family: SauceCodePro Nerd Font
    family: Fantasque Sans Mono
    #style: Regular
  bold:
    family: Fantasque Sans Mono
    #family: SauceCodePro Nerd Font
  italic:
    family: Fantasque Sans Mono
    #family: SauceCodePro Nerd Font

  # Point size of the font
  size: 14
  use_thin_strokes: false

# Use custom cursor colors. If true, display the cursor in the cursor.foreground
# and cursor.background colors, otherwise invert the colors of the cursor.
# Colors (Snazzy)
# custom_cursor_colors: true

# Colors (Darkside)
# Colors (Pencil Dark)
colors:
  primary:
    background: '0x323232'
    foreground: '0xd8d8d8'
  normal:
    black:   '0x4c4c4c'
    red:     '0xff005f'
    green:   '0xa4d32d'
    yellow:  '0xf6c336'
    blue:    '0x5496ff'
    magenta: '0x9e6ffe'
    cyan:    '0x218693'
    white:   '0xd8d8d8'
  bright:
    black:   '0x666666'
    red:     '0xff6767'
    green:   '0xa0e11e'
    yellow:  '0xf7d325'
    blue:    '0x1ca1db'
    magenta: '0xc48dff'
    cyan:    '0x77dfd8'
    white:   '0xf2f2f2'
#
# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
visual_bell:
  animation: EaseOutExpo
  duration: 0

# Background opacity
# background_opacity: 1.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  # Click settings
  #
  # The `double_click` and `triple_click` settings control the time
  # alacritty should wait for accepting multiple clicks as one double
  # or triple click.
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

  # Faux Scrollback
  #
  # The `faux_scrollback_lines` setting controls the number
  # of lines the terminal should scroll when the alternate
  # screen buffer is active. This is used to allow mouse
  # scrolling for applications like `man`.
  #
  # To disable this completely, set `faux_scrollback_lines` to 0.
  faux_scrolling_lines: 1
  url:
    launcher:
      program: open

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>\t"
  save_to_clipboard: true
# Style of the cursor
#
# Values for 'cursor_style':
# - Block
# - Underline
# - Beam
cursor:
  style: Beam
  unfocused_hollow: false

# Live config reload (changes require restart)
live_config_reload: true

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/zsh.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /usr/local/bin/zsh
  #  args:
  #  - --login

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Paste,                   action: Paste                        }
  - { key: Copy,                    action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: N,        mods: Command,    action: SpawnNewInstance    }
  - { key: Space,     mods: Alt,          chars: " "                     }
  - { key: Comma,     mods: Command,      command:
      {program: "open", args: ["~/.config/alacritty/alacritty.yml"]}     }
  - { key: Key0,     mods: Command, action: ResetFontSize                }
  - { key: Equals,   mods: Command, action: IncreaseFontSize             }
  - { key: Minus,    mods: Command, action: DecreaseFontSize             }
  - { key: K,        mods: Command, action: ClearHistory                 }
  - { key: LBracket, mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-pane", "-L"] } }
  - { key: RBracket, mods: Command, command: { program: "/usr/local/bin/tmux", args: ["select-pane", "-R"] } }
  - { key: LBracket, mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["prev"] } }
  - { key: RBracket, mods: Command|Shift, command: { program: "/usr/local/bin/tmux", args: ["next"] } }
